
[settings]
experimental = true
lockfile = true
# quiet = true
windows_shim_mode = "symlink"

[tools]
'bat' = 'latest'
'deno' = 'latest'
'eza' = 'latest'
'cargo-binstall' = 'latest'
'cargo:treefmt' = 'latest'
# 'cargo:sqruff' = 'latest' # Installed locally since this is not working
'docker-cli' = 'latest'
'docker-compose' = 'latest'
'docker-slim' = 'latest'
'jujutsu' = 'latest'
'ripgrep' = 'latest'
'taplo' = 'latest'
'tokei' = 'latest'
'usage' = 'latest'
'uv' = 'latest'
'watchexec' = 'latest'

[env]
PRJ_ROOT = "{{config_root}}"
PRJ_ENV = "{{config_root}}\\environment"
MISE_PROJECT_ROOT = "{{env.PRJ_ROOT}}"
PRJ_NAME = "{{ cwd | basename }}"
DATETIME = "{{ now() | date(format='%Y-%m-%d_%H:%M:%S') }}"
MSSQL_CONTAINER = "mssql"
MSSQL_COMPOSE = "{{env.PRJ_ENV}}\\mssql.compose.yml"
MSSQL_VOLUME = "{{env.MSSQL_CONTAINER}}_data"
MSSQL_PASSWORD = "P@ssw0rd"
MSSQL_USER = "sa"
MSSQL_DB = "master"
MSSQL_PORT = "14330"

[hooks]
enter = "{{mise_bin}} install --quiet" #TODO: This doesn't seem to do anything

[tasks.info]
description = "Show the information about the project"
alias = "inf"
run = [
  "eza --version",
  "cargo --version",
  "jj --version",
  "python --version",
  "rustc --version",
  "tokei --version",
  "treefmt --version",
  "uv --version",
  "tokei",
  "{{mise_bin}} files",
]

[tasks.lint]
description = "Format the project tree"
alias = "f"
run = [
  "{{mise_bin}} fmt",
  "treefmt --clear-cache --fail-on-change --allow-missing-formatter",
]

[tasks.push]
description = "Push the changes to the main branch"
alias = "up"
run = ["jj describe", "jj bookmark set main --revision=@", "jj git push"]

[tasks.files]
description = "List the files in the current directory"
alias = "fl"
run = "eza --almost-all --icons=always --long --group-directories-first  --git --git-ignore"
[tasks.tree]
description = "List the files recursively from the current directory"
alias = "ft"
run = "eza --icons --long --group-directories-first --git --tree"

[tasks.mssql]
description = "Initialize the SQL Server"
alias = "ms"
run = [
  #@ Stop and remove the container if it exists
  "({{flag(name='rebuild')}} && {{mise_bin}} mssql-rm-container) || true",

  #@ Remove the named volume to ensure clean state
  "({{flag(name='clean')}} && {{mise_bin}} mssql-rm-container && {{mise_bin}} mssql-rm-volume) || true",

  #@ Bring down the server is running
  "({{flag(name='stop')}} && {{mise_bin}} mssql-stop) || true",

  #@ Initialize the server
  "({{flag(name='stop')}} || {{mise_bin}} mssql-start) || true",

  #@ Show the container info
  "({{flag(name='stop')}} || ({{flag(name='info')}} && {{mise_bin}} mssql-info) ) || true",

  #@ Show the container log
  "({{flag(name='stop')}} || ({{flag(name='logs')}} && {{mise_bin}} mssql-logs) ) || true",

  #@ Test the connection
  "({{flag(name='stop')}} || ({{flag(name='test')}} && {{mise_bin}} mssql-test) ) || true",
]

[tasks.mssql-test]
description = "Test SQL Server connection"
alias = "ms-t"
env = { container = "mssql" }
run = [
  "echo üîç Testing SQL Server connection...",
  "(podman exec {{env.MSSQL_CONTAINER}} /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P P@ssw0rd -Q SELECT @@VERSION, GETDATE() as CurrentTime && echo ‚úÖ Connection successful! || echo ‚ùå Connection failed! podman logs --tail 20 {{env.MSSQL_CONTAINER}}) || true",
]

[tasks.mssql-logs]
description = "Show SQL Server container logs"
alias = "ms-l"
env = { container = "mssql" }
run = "podman logs -f {{env.MSSQL_CONTAINER}}"

[tasks.mssql-stop]
description = "Stop the MSSQL Server container"
alias = "ms-down"
run = "podman compose --file {{env.MSSQL_COMPOSE}} down || true"

[tasks.mssql-start]
description = "Start the MSSQL Server container"
alias = "ms-up"
run = [
  "docker-compose --file {{env.MSSQL_COMPOSE}} up --build --detach",
  # "podman compose --file {{env.MSSQL_COMPOSE}} up --build --detach",
]

[tasks.mssql-info]
description = "Start the MSSQL Server container"
alias = "ms-i"
run = "podman ps --filter name={{env.MSSQL_CONTAINER}} --format json || true"

[tasks.mssql-rm-container]
description = "Remove the MSSQL Server Container"
hide = true
alias = "ms-rm"
confirm = 'Are you sure you want stop/remove the container?'
run = [
  "(podman ps --filter name={{env.MSSQL_CONTAINER}} | rg {{env.MSSQL_CONTAINER}} --quiet && podman stop {{env.MSSQL_CONTAINER}}) || true",
  "(podman container exists {{env.MSSQL_CONTAINER}} && podman rm {{env.MSSQL_CONTAINER}} && echo container stopped and removed) || true",
]

[tasks.mssql-rm-volume]
description = "Remove MSSQL Server Database Volume"
hide = true
alias = "ms-rmv"
confirm = 'Are you sure you want reset the database volume?'
env = { volume = "environment_{{env.MSSQL_VOLUME}}" }
run = """
  (podman volume exists {{env.volume}} && podman volume rm {{env.volume}} && echo volume removed) || true
"""
